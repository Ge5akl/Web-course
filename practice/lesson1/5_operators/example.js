// Бинарный и унарный минус
var x = 1;
x = -x;
alert( x ); // -1, применили унарный минус

var x = 1, y = 3;
alert( y - x ); // 2, бинарный минус

// Аргументы приводятся к числу.
alert( 2 - '1' ); // 1
alert( 6 / '2' ); // 3


// Бинарный и унарный плюс.
// Сложение чисел.
var x = 1, y = 3;
alert( y + x ); // 4, бинарный плюс

// Объединение строк.
var a = "моя" + "строка";
alert( a ); // моястрока

// Если хотя бы один аргумент является строкой, то второй будет также преобразован к строке.
alert( '1' + 2 ); // "12"
alert( 2 + '1' ); // "21"

// Унарный плюс ничего не делает с числами
alert( +1 ); // 1
alert( +(1 - 2) ); // -1

var apples = "2";
var oranges = "3";
alert( apples + oranges ); // "23", так как бинарный плюс складывает строки
alert( +apples + +oranges ); // 5, число, оба операнда предварительно преобразованы в числа

// Таблица приоритетов:
// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

// Оператор присваивания.
// У оператора присваивания низкий приоритет.
var x = 2 * 2 + 1;
alert( x ); // 5

// Присваивание по цепочке.
var a, b, c;
a = b = c = 2 + 2;
alert( a ); // 4
alert( b ); // 4
alert( c ); // 4

// Присваивание возвращает значение.
var a = 1;
var b = 2;
var c = 3 - (a = b + 1);
alert( a ); // 3
alert( c ); // 0


// Оператор взятия остатка.
alert( 5 % 2 ); // 1, остаток от деления 5 на 2
alert( 8 % 3 ); // 2, остаток от деления 8 на 3
alert( 6 % 3 ); // 0, остаток от деления 6 на 3


// Операторы инкремента и декремента.
// Инкремент увеличивает на 1.
var i = 2;
i++;      // более короткая запись для i = i + 1.
alert(i); // 3

// Декремента уменьшает на 1.
var i = 2;
i--;      // более короткая запись для i = i - 1.
alert(i); // 1

// Префиксная форма возвращает увеличенное значение.
var i = 1;
var a = ++i;
alert(a); // 2

// Постфиксная форма вернёт старое значение до увеличения.
var i = 1;
var a = i++;
alert(a); // 1


/*Побитовые операторы:
&   - И (AND)
|   - ИЛИ (OR)
^   - Исключающее ИЛИ (XOR)
<<  - Левый сдвиг (LEFT SHIFT)
>>  - Правый сдвиг (RIGHT SHIFT)
>>> - Правый сдвиг с заполнением нулями (ZERO-FILL RIGHT SHIFT)
*/

// Сокращённая арифметика с присваиванием.
var n = 2;
n = n + 5; // теперь n=7
n = n * 2; // теперь n=14
alert( n ); // 14

var n = 2;
n += 5; // теперь n=7 (работает как n = n + 5)
n *= 2; // теперь n=14 (работает как n = n * 2)
alert( n ); // 14

// Имеет такой же приоритет, как и обычное присваивание.
var n = 2;
n *= 3 + 5;
alert( n ); // 16  (n = 2 * 8)


// Оператор запятая.
// Скобки нужны, т.к. приоритет ниже присваивания.
var a = (5, 6);
alert(a); // 6

// три операции в одной строке
for (a = 1, b = 3, c = a*b; a < 10; a++) {}